{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"GodotJS - JavaScript language binding for Godot game engine","text":"<p>This module implements JavaScript/TypeScript language support for the Godot game engine using QuickJS as the JavaScript engine.</p>"},{"location":"#features","title":"Features","text":"<ul> <li>Almost complete ES2020 support</li> <li>All Godot API available</li> <li>Operator overriding for built-in types (Vector3, Color, etc)</li> <li>TypeScript support</li> <li>Using third-party libraries from npm</li> <li>Multi-thread support with Worker API</li> <li>Full code completion support for all Godot APIs including signals and enumerations</li> <li>Debug in Visual Studio Code with the plugin - currently not available for 4.x</li> </ul>"},{"location":"#getting-started","title":"Getting started","text":"<p>Read the getting-started.</p>"},{"location":"#getting-the-engine","title":"Getting the engine","text":"<p>No installation or setup necessary. The binaries for download are the complete, usable Godot editor and engine with JavaScript/TypeScript language support.</p>"},{"location":"#binary-downloads","title":"Binary downloads","text":"<p>Download the binaries from the release page.</p>"},{"location":"#compiling-from-source","title":"Compiling from source","text":"<ul> <li>Clone the source code of godot:<ul> <li><code>git clone git@github.com:godotengine/godot.git</code>  or</li> <li><code>git clone https://github.com/godotengine/godot.git</code></li> </ul> </li> <li>Clone this module and put it into <code>godot/modules/javascript</code>:<ul> <li><code>git clone git@github.com:Geequlim/ECMAScript.git godot/modules/javascript</code>  or</li> <li><code>git clone https://github.com/Geequlim/ECMAScript.git godot/modules/javascript</code></li> </ul> </li> <li>Recompile the godot engine<ul> <li>Use <code>scons</code> with those additional options <code>warnings=extra werror=yes module_text_server_fb_enabled=yes</code> to show all potential errors</li> </ul> </li> </ul>"},{"location":"#documentation-tutorials-demos","title":"Documentation, Tutorials &amp; Demos","text":"<p>Read this documentation or look at the tutorials or demos:</p> <ul> <li>ECMAScriptDemos</li> <li>godot-ECMAScript-cookbook</li> <li>godot-typescript-starter</li> </ul>"},{"location":"api/","title":"API","text":"<p>All of Godot's APIs are defined within the <code>godot</code> namespace.</p> <p>No API names have been renamed or changed, so you shouldn't need to change your habits.</p> GDScript JavaScript null null int number float number String string Array Array Dictionary Object NodePath string Object godot.Object Resource godot.Resource Vector2 godot.Vector2 Color godot.Color sin(v) godot.sin(v) print(v) godot.print(v) PI godot.PI Color.black godot.Color.black Control.CursorShape godot.Control.CursorShape Label.Align.ALIGN_LEFT godot.Label.Align.ALIGN_LEFT"},{"location":"api/#api-specification","title":"API specification:","text":"<ul> <li>Keys of Dictionary are converted to String in JavaScript</li> <li>Signals are defined as constants to their classes   <code>godot.Control.resized === 'resized' // true</code></li> </ul>"},{"location":"api/#additional-functions","title":"Additional functions","text":"<ul> <li><code>godot.register_signal(cls, signal_name)</code> to register signals</li> <li><code>godot.register_property(cls, name, default_value)</code> to define and export properties</li> <li><code>godot.register_class(cls, name)</code> to register named class manually</li> <li><code>godot.set_script_tooled(cls, tooled)</code> to set <code>tooled</code> of the class</li> <li><code>godot.set_script_icon(cls, path)</code> to set icon of the class</li> <li><code>godot.get_type(val)</code> Returns the internal type of the given <code>Variant</code> object, using the <code>godot.TYPE_*</code></li> <li><code>godot.yield(target, signal)</code> Returns a Promise which will be resolved when the signal emitted</li> <li><code>requestAnimationFrame(callback)</code> registers a callback function to be called every frame, returns a request ID.</li> <li><code>cancelAnimationFrame(request_id)</code> to cancel a previously scheduled frame request</li> <li><code>require(module_id)</code> to load a CommonJS module or load a resource file</li> <li><code>$</code> is the alias of <code>Node.get_node</code></li> </ul>"},{"location":"api/#using-signals","title":"Using signals","text":"<p>Allow passing functions for <code>godot.Object.connect</code>, <code>godot.Object.disconnect</code>, and <code>godot.Object.is_connected</code>:</p> <pre><code>this.panel.connect(godot.Control.resized, (size) =&gt; {\n  console.log(\"The size of the panel changed to:\", size);\n});\n</code></pre> <p>Using <code>await</code> to wait for signals</p> <pre><code>await godot.yield(\n  this.get_tree().create_timer(1),\n  godot.SceneTreeTimer.timeout\n);\nconsole.log(\"After one second to show\");\n</code></pre> <p>Preload resources with ECMAScript import statement</p> <pre><code>import ICON from \"res://icon.png\";\n</code></pre>"},{"location":"api/#multi-threading","title":"Multi-threading","text":"<p>Multi-threading with minimal Worker API (This is an experimental feature)</p> <p>Start a new thread with Worker:</p> <pre><code>const worker = new Worker(\"worker.js\"); // Run worker.js in a new thread context\nworker.postMessage({ type: \"load_dlc\", value: \"dlc01.pck\" });\nworker.onmessage = function (msg) {\n  console.log(\"[MainThread] received message from worker thread:\", msg);\n};\n</code></pre> <p>Transfer value in different thread context with <code>godot.abandon_value</code> and <code>godot.adopt_value</code>:</p> <pre><code>// In worker thread\nlet id = godot.abandon_value(object);\npostMessage({ type: \"return_value\", id: id });\n\n// In the host thread\nworker.onmessage = function (msg) {\n  if (typeof msg === \"object\" &amp;&amp; msg.type === \"return_value\") {\n    let value_from_worker = godot.adopt_value(msg.id);\n  }\n};\n</code></pre>"},{"location":"getting-started/","title":"Getting Started","text":""},{"location":"getting-started/#how-to-export-script-class-to-godot","title":"How to export script class to Godot","text":"<ol> <li>Define your JavaScript class and inherit from a Godot class, then export it as the default entry:</li> </ol> <pre><code>// The default export entry is treated as an exported class to Godot\nexport default class MySprite extends godot.Sprite {\n    // this is _init() in GDScript\n    constructor() {\n        super();\n    }\n\n    _ready() {}\n\n    _process(delta) {}\n}\n</code></pre> <ol> <li>Save the script with extension <code>.mjs</code></li> <li>Attach the script file to the node or resource object like you do with GDScript</li> </ol>"},{"location":"getting-started/#how-to-export-signals","title":"How to export signals","text":"<pre><code>export default class MySprite extends godot.Sprite {}\n// register game_over signal to MySprite class\ngodot.register_signal(MySprite, \"game_over\");\n</code></pre>"},{"location":"getting-started/#how-to-export-properties","title":"How to export properties","text":"<pre><code>export default class MySprite extends godot.Sprite {\n    _process(delta) {\n        // Yes! We can use operators in JavaScript like GDScript\n        this.position += this.direction * delta;\n    }\n}\n// export 'direction' properties to MySprite Godot inspector\ngodot.register_property(MySprite, \"direction\", new godot.Vector2(1, 0));\n</code></pre> <p>There are 2 ways of using the <code>godot.register_property</code>. The third parameter can either be a default value for the property you're trying to export or an object giving a more detailed description of how the editor should show it.</p> <pre><code>function register_property(target: GodotClass | godot.Object, name: string, value: any);\nfunction register_property(target: GodotClass | godot.Object, name: string, info: PropertyInfo);\n</code></pre> <p>So calling the <code>register_property</code> like this:</p> <pre><code>godot.register_property(MyClass, \"number_value\", 3.14);\n</code></pre> <p>Is the simplified version of:</p> <pre><code>godot.register_property(MyClass, \"number_value\", {\n    type: godot.TYPE_REAL,\n    hint: godot.PropertyHint.PROPERTY_HINT_NONE,\n    hint_string: \"\",\n    default: 3.14,\n});\n</code></pre> <p>For more detail on how to use it, click here.</p>"},{"location":"typescript/","title":"TypeScript","text":"<ul> <li>Run the menu command <code>Project &gt; Tools &gt; JavaScript &gt; Generate TypeScript Project</code> from the Godot editor to generate a TypeScript project</li> <li>Run <code>tsc -w -p .</code> under your project folder in the terminal to compile scripts</li> </ul>"},{"location":"typescript/#code-completion","title":"Code completion","text":"<ul> <li>Code completion in TS will automatically work once the TypeScript project is generated by the above steps.</li> <li>Code completion in VSCode is achieved by the property <code>\"types\": \"./godot.d.ts\"</code> in the generated package.json file of the TypeScript project. The <code>godot.d.ts</code> file can be generated alone via the <code>Project &gt; Tools &gt; ECMAScript &gt; Generate TypeScript Declaration File</code> editor menu option and added to a <code>package.json</code> file manually to achieve this without a full TypeScript project.</li> </ul>"},{"location":"typescript/#example","title":"Example","text":"<p>Compile your <code>ts</code> script to a <code>.mjs</code> file then we can attach it to a node in godot editor.</p> <p>Most of the <code>register</code> functions are available as various decorators as seen below.</p> <pre><code>import { signal, property, tool, onready, node } from \"./decorators\";\n\n@tool // make the script runnable in godot editor\nexport default class InputLine extends godot.HBoxContainer {\n    // define a signal\n    @signal\n    static readonly OnTextChanged: string;\n\n    // expose a node property\n    @node\n    icon: godot.Sprite;\n\n    // register offset property with the godot inspector with default value of Vector2(0, 0)\n    @property({ default: godot.Vector2.ZERO })\n    offset: godot.Vector2;\n\n    // register properties for godot editor inspector\n    @property({ type: godot.VariantType.TYPE_STRING })\n    get title() {\n        return this._title;\n    }\n    set title(v: string) {\n        this._title = v;\n        if (this._label) {\n            this._label.text = v;\n        }\n    }\n    private _title: string;\n\n    @property({ default: \"Input text here\" })\n    get hint() {\n        return this._hint;\n    }\n    set hint(v: string) {\n        this._hint = v;\n        if (this.edit) {\n            this.edit.hint_tooltip = v;\n            this.edit.placeholder_text = v;\n        }\n    }\n    private _hint: string;\n\n    get label(): godot.Label {\n        return this._label;\n    }\n    protected _label: godot.Label;\n\n    // call get_node('LineEdit') and assign the returned value to 'this.edit' automatically when the node is ready\n    @onready(\"LineEdit\")\n    edit: godot.LineEdit;\n\n    get text(): string {\n        return this.edit?.text;\n    }\n\n    _ready() {\n        // get first child with the type of godot.Label\n        this._label = this.get_node(godot.Label);\n\n        // Apply the inspector filled values with property setters\n        this.title = this.title;\n        this.hint = this.hint;\n\n        this.edit.connect(godot.LineEdit.text_changed, (text: string) =&gt; {\n            this.emit_signal(InputLine.OnTextChanged, text);\n        });\n    }\n}\n</code></pre>"}]}